setwd("~/Desktop/Honour R/CREATING DATA FRAME/My_files")
my_files<-list.files(path="~/Desktop/Honour R/CREATING DATA FRAME/My_files")
my_files <- list.files(path = "~/Desktop/Honour R/CREATING DATA FRAME/My_files", pattern = '*ACI.csv*')
my_files <- substr(my_files, 0, 24)
my_indicies <- c('ACI', 'BGN', 'CVR', 'DIF', 'ENT', 'EVN', 'Indices','OSC','PMN','R3D','RHZ','RNG','RPS','RVT','SPT','SUM')
all_data <- NULL
for (current_file in my_files) {
  csv_filenames <- paste0(current_file, '__Towsey.Acoustic.', my_indicies, '.csv')
  file_data <- NULL
  for (csv_filename in csv_filenames) {
    print(csv_filename)
    current_index_data <- read.csv(csv_filename)
    current_index_data <- current_index_data[,-1]
    if (is.null(file_data)) {
      file_data <- current_index_data
    } else {
      file_data <- cbind(file_data, current_index_data)
    }
    
  }
  file_data$filename <- current_file
  file_data$minute_number <- 0:59
  if (is.null(all_data)) {
    all_data <- file_data
  } else {
    all_data <- rbind(all_data, file_data)
  }
  
}

nscalar<-256
nIndices<-26
#naming ACI
prefixACI <- "ACI"
suffixACI<-seq(1:nscalar)
my.namesACI<-c(paste(prefixACI,suffixACI,sep=""))
my.namesACI
#naming BGN
prefixBGN<-"BGN"
suffixBGN<-seq(1:nscalar)
my.namesBGN<-c(paste(prefixBGN,suffixBGN,sep=""))
my.namesBGN
#namingCVR
prefixCVR<-"CVR"
suffixCVR<-seq(1:nscalar)
my.namesCVR<-c(paste(prefixCVR,suffixCVR,sep=""))
my.namesCVR
#namingDIF
prefixDIF<-"DIF"
suffixDIF<-seq(1:nscalar)
my.namesDIF<-c(paste(prefixDIF,suffixDIF,sep=""))
my.namesDIF
#naming ENT
prefixENT<-"ENT"
suffixENT<-seq(1:nscalar)
my.namesENT<-c(paste(prefixENT,suffixENT,sep=""))
my.namesENT
#naming EVN
prefixEVN<-"EVN"
suffixEVN<-seq(1:nscalar)
my.namesEVN<-c(paste(prefixEVN,suffixEVN,sep=""))
my.namesEVN
#naming Indices
prefixIndices<-"Indices"
suffixIndices<-seq(1:nIndices)
my.namesIndices<-c(paste(prefixIndices,suffixIndices,sep=""))
my.namesIndices
#naming OSC
prefixOSC<-"OSC"
suffixOSC<-seq(1:nscalar)
my.namesOSC<-c(paste(prefixOSC,suffixOSC,sep=""))
my.namesOSC
#naming PMN
prefixPMN<-"PMN"
suffixPMN<-seq(1:nscalar)
my.namesPMN<-c(paste(prefixPMN,suffixPMN,sep=""))
my.namesPMN
#naming R3D
prefixR3D<-"R3D"
suffixR3D<-seq(1:nscalar)
my.namesR3D<-c(paste(prefixR3D,suffixR3D,sep=""))
my.namesR3D
#naming RHZ
prefixRHZ<-"RHZ"
suffixRHZ<-seq(1:nscalar)
my.namesRHZ<-c(paste(prefixRHZ,suffixRHZ,sep=""))
my.namesRHZ
#naming RNG
prefixRNG<-"RNG"
suffixRNG<-seq(1:nscalar)
my.namesRNG<-c(paste(prefixRNG,suffixRNG,sep=""))
my.namesRNG
#naming RPS
prefixRPS<-"RPS"
suffixRPS<-seq(1:nscalar)
my.namesRPS<-c(paste(prefixRPS,suffixRPS,sep=""))
my.namesRPS
#namingRVT
prefixRVT<-"RVT"
suffixRVT<-seq(1:nscalar)
my.namesRVT<-c(paste(prefixRVT,suffixRVT,sep=""))
my.namesRVT
#naming SPT
prefixSPT<-"SPT"
suffixSPT<-seq(1:nscalar)
my.namesSPT<-c(paste(prefixSPT,suffixSPT,sep=""))
my.namesSPT
#naming SUM
prefixSUM<-"SUM"
suffixSUM<-seq(1:nscalar)
my.namesSUM<-c(paste(prefixSUM,suffixSUM,sep=""))
my.namesSUM
#joining character strings
all_indices_names=c(my.namesACI,my.namesBGN,my.namesCVR,my.namesDIF,my.namesENT,my.namesEVN,my.namesIndices,my.namesOSC,my.namesPMN,my.namesR3D,my.namesRHZ,my.namesRNG,my.namesRPS,my.namesRVT,my.namesSPT,my.namesSUM)
length(all_indices_names)

#Naming column headings
colnames(all_data)[1:3866]<-paste(all_indices_names)
head(names(all_data))
tail(names(all_data))

#3866 with indices, 3867,3868 minute and filename (3869 will be PW)

train_204<-read.csv("train_204.csv",FALSE,",")
nrow(all_data)==nrow(train_204)
extract_filenames<-train_204[,2]
extract_filenames<-substr(extract_filenames, 0, 24)

if (!all(extract_filenames == all_data$filename)) {
  stop("labels data does not align with index combined dataframe. This could be due to the files being processed in a different order")
}

Plains_wanderer<-train_204[,4]
all_data<-cbind(all_data,Plains_wanderer)
tail(names(all_data))
all_data$Plains_wanderer

ncol(all_data)==3869

TRY THE AVERAING OUT

write.csv(all_data, 'all_data.csv')

===================================
===================================
  
options(shiny.maxRequestSize=800000000)
all_data<-read.csv("all_data.csv")
tail(names(all_data))
nrow(all_data)==204*60
ncol(all_data)==3869

#Creating balanced labelled dataset
total_instances<-nrow(all_data)
total_presence<-sum(all_data$Plains_wanderer)
total_absence<-nrow(all_data)-total_presence
ideal_balanced_instances<-total_presence*2
ideal_excess<-total_presence
excess_quantity=total_absence-ideal_excess
rows_excess<-which(all_data$Plains_wanderer == 0, arr.ind = TRUE)
excess_remove<-rows_excess[1:excess_quantity]
all_data_balanced<-all_data[-excess_remove,]
ncol(all_data_balanced)==3869
nrow(all_data_balanced)==ideal_balanced_instances


#Shuffling data
set.seed(420)
#shuffle row indices of dataframe
rows<-sample(nrow(all_data_balanced))
shuffled_all_data_balanced<-all_data_balanced[rows,]

install.packages("dplyr")
install.packages("caret", dependencies = TRUE)

library(dplyr)
library(caret)

#Creating train and test split 
set.seed(1234)
split_percent=0.95
in_training <- createDataPartition(shuffled_all_data_balanced$Plains_wanderer, p = split_percent, list = FALSE)
training<- shuffled_all_data_balanced[in_training,]
nrow(training) ##should ~ equal percentage_split x nrow(alldata50)
testing<- shuffled_all_data_balanced[-in_training,]

nrow(training)
nrow(testing)

#Viewing
training$Plains_wanderer
testing$Plains_wanderer

#View headers
colnames(training)
colnames(testing)

#changing Plains_wanderer integers to factors
training$Plains_wanderer = cut(training$Plains_wanderer,2,labels=c('No','Yes'))
testing$Plains_wanderer = cut(testing$Plains_wanderer,2,labels=c('No','Yes'))

#view Plains_wanderer factors 
training$Plains_wanderer
testing$Plains_wanderer

#Confirm Plains_wanderer class:factor
class(training$Plains_wanderer)
class(testing$Plains_wanderer)

#Write training and testing files as .csv
DO LATER


====================================
====================================

WExluding ID columns of model as features

#Making syntactically valid names for Random Forest model 
make.names(training, unique = FALSE, allow_ = TRUE)
make.names(testing, unique = FALSE, allow_ = TRUE)

#Define the control
control <- trainControl(method = "cv",
                        number = 10,
                        search = "grid")


#Create and run model with default paramters
set.seed(1234)
training_default <- train(Plains_wanderer~.,
                          data = training,
                          method = "rf",
                          metric = "Accuracy",
                          trControl = control)
print(training_default)

#the algorithm uses 500 trees and tested three different values of mtry: 2, 87 and 3869
#The final value used for the model was mtry = X, accuracy = X
#Trying to get a higher accuracy 
